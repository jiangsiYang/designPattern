工厂方法模式
定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。
工厂方法模式的工厂方法（如createPizza()）也不一定总是抽象的，可以定义一个默认的工厂方法来产生某些具体的产品，这么一来，即使创建者没有任何子类，依然可以创建产品。

设计原则
依赖倒置原则：要依赖抽象，不要依赖具体类。
这个原则说明了：不能让高层组件依赖底层组件，而且，不论是高层或低层组件，都应该依赖抽象。
所谓高层组件，是由其它底层组件定义其行为的类。例如，PizzaStore是个高层组件，因为它的行为是有披萨定义的。而比萨本身属于低层组件。
在应用工厂方法之后，高层组件（PizzaStore）和低层组件（各种披萨）都依赖了Pizza抽象。所以工厂方法完美体现了依赖倒置原则。
如何避免在OO设计中违反依赖倒置原则：
1、变量不可以持有具体类的引用。
2、不要让类派生自具体类。
3、不要覆盖基类中已实现的方法。

抽象工厂模式
提供一个接口（如PizzaIngredientFactory），用于创建相关或依赖对象的家族，而不需要明确指定具体类。


