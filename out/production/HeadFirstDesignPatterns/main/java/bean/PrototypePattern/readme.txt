模板方法模式：在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。

这个模式是用来创建一个算法的模板。什么是模板？模板就是一个方法。更具体地说，这个方法将算法定义成一组步骤，其中的任何步骤都可以是抽象的，由子类
负责实现。这可以确保算法的结构保持不变，同时由子类提供部分实现。

创建一个模板方法时，什么时候使用抽象方法，什么时候使用钩子？
当你的子类“必须”提供算法中某个方法或步骤的实现时，就使用抽象方法。如果算法的这个部分是可选的，就用钩子。如果是钩子的话，子类可以选择实现这个钩子，
但并不强制这么做。

微信小程序的ONLOAD、OnRead、OnShow就是使用的钩子，整个渲染过程就是模板方法模式。

设计原则：
好莱坞原则：别调用（打电话给）我们，我们会调用（打电话给）你。
在好莱坞原则之下，我们允许低层组件将自己挂钩到系统上，但是高层组件会决定什么时候和怎样使用这些低层组件。换句话说，高层组件对待低层组件的方式是“别
调用我们，我们会调用你”。

好莱坞原则强调高层对低层的主动作用，即低层应该只管好自己的工作（具体实现），而高层自有它自己的工作（这就是管理低层的逻辑们，或者说从client到具体实
现的一系列中间逻辑），在不需要到某个低层的时候，高层并不会调用到这个具体低层，低层永远不需要向高层作出表示，，说它需要被调用，，(即在所有的处于使用
者与现有代码的中间的,用于隔离和解偶二者的,那些中间逻辑中，低层逻辑永远不要涉入高层的实现，而只要高层通过某个逻辑去涉入低层的实现，也即低层应不要调用
高层，只有高层才会去调用低层，这才是合理的，我们应尽量避免向上调用和相互调用)

比如CaffeineBeverage就是高层组件，Coffee和Tea是低层组件，CaffeineBeverage能够控制冲泡法的算法，只有在需要子类实现某个方法时，才调用子类。

除了模板方法模式，工厂方法、观察者也采用了好莱坞原则。状态模式好像也是。

JAVA数组类的排序也是一个模板方法。