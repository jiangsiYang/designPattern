单件模式：确保一个类只有一个实例，并提供一个全局访问点。

为了确保单价模式能在多线程的状况下工作，有以下选择：
1、如果getInstance()的性能对应用程序不是很关键，直接在getInstance()方法加上同步锁Synchronized即可，但是同步一个方法可能造成程序执行效率下降100倍，因此，如果将
getInstance()的程序使用在频繁运行的地方，你可能就得重新考虑了。
2、使用“饥汉式”创建实例，而不用延迟实例化的做法。
如果应用程序总是创建并使用单价实例，或者在创建和运行时方面的负担不太繁重，你可以直接private static Singleton uniqueInstance1 = new Singleton()，利用这个做法，JVM
在加载这个类时马上创建此唯一的单件实例。
3、用“双重检查加锁”，在getInstance()中减少使用同步。
首先检查是否实例已经创建了，如果尚未创建，才进行同步去创建。这样一来，只有第一次会同步。
