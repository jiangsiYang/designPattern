桥接模式：使用桥接模式不止改变你的实现，也改变你的抽象。

生成器模式：使用生成器模式封装一个产品的构造过程，并允许按步骤构造。

责任链模式：当你想要让一个以上的对象有机会能够处理某个请求的时候，就使用责任链模式。

蝇量模式：如想让某个类的一个实例能用来提供许多“虚拟实例”，就使用蝇量模式。

解释器模式：使用解释器模式为语言创建解释器。

中介者模式：使用中介者模式来集中相关对象之间复杂的沟通和控制方式。

备忘录模式：当你需要让对象返回之前的状态时（例如，你的用户请求“撤销”），就使用备忘录模式。

原型模式：当创建给定类的实例的过程很昂贵或很复杂时，就使用原型模式。

访问者模式：当你想要为一个对象的组合增加新的能力，且封装并不重要时，就使用访问者模式。

